    #include"stm32f10x.h"
    void GPIO_Config(); 
    void TIM3_Config(); 
    int main(void) 
{ 
    SystemInit(); 
    GPIO_Config();//引脚的配置
    TIM3_Config();////时钟设置
    while (1);
    
} 
     void TIM3_Config(void)  
{  
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;//时钟结构体配置  
    TIM_OCInitTypeDef  TIM_OCInitStructure;//output Chanel   (输出频道结构体设置)            
    /*PCLK1经过2倍频后作为TIM3的时钟源等于72MHz*/  
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); //TIM3时钟开启 
    /* Time base configuration */                                            
    TIM_TimeBaseStructure.TIM_Period =0xEA5F;//时钟的周期  
    TIM_TimeBaseStructure.TIM_Prescaler = 5;    //设置预分频：预分频=，即为72/6=12MHz  
    TIM_TimeBaseStructure.TIM_ClockDivision = 0; //设置时钟分频系数：不分频  
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;//向上计数溢出模式  
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure); //初始化 
    /* PWM1 Mode configuration: Channel1 */  
    u16 CCR1= 30000; //捕获比较寄存器  
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; //配置为PWM模式1  
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;//定义输出使能                
    TIM_OCInitStructure.TIM_Pulse = CCR1;  //设置跳变值，当计数器计数到这个值时，电平发生跳变  
    TIM_OCInitStructure.TIM_OCPolarity =TIM_OCPolarity_High;//当定时器计数值小于CCR1时为高电平  
    TIM_OC2Init(TIM3, &TIM_OCInitStructure); //使能通道2,oc1为通道1，oc2为通道2 output Chanel X（1.2.3.4），通道2在没有重映射的情况下对应pa7口，所以在gpio的配置中要配置pa7口
    TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);//使能TIM3在ccr2上的预装载寄存器 
    TIM_ARRPreloadConfig(TIM3, ENABLE); //使能TIM3重载寄存器ARR  
    /* TIM3 enable counter */  
    TIM_Cmd(TIM3, ENABLE);//使能TIM3   
} 
    void GPIO_Config(void)  
{ 
  GPIO_InitTypeDef GPIO_InitStructure; 
   /* GPIOA and GPIOB clock enable */ 
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);  
   /*GPIOA Configuration: TIM3 channel 1 and 2 as alternate function push-pull */ 
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6| GPIO_Pin_7;//用于产生pwm波的端口，根据“stm32参考手册”里面重映射表的设置
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;// 复用推挽输出 
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  
  GPIO_Init(GPIOA, &GPIO_InitStructure); 
} 