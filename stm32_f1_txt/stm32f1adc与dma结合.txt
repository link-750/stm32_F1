  #include"stm32f10x.h"
  #include<stdio.h>

  void USART_gpio_init();//led灯的gpio函数的声明
  void USART_Configuration();
  void RCC_Configuration();
  void DMA_Configuration();
  void ADC_Configuration();
  void delay();
  u16 ADCData[50];//u16代表16位二进制来代表数据，因为ad一般只为12位来表示，所以定义16位足够
  void main()
{ 
  int i=0;
  RCC_Configuration();
  USART_gpio_init();
  USART_Configuration();
  ADC_Configuration();
  DMA_Configuration();
  while(1)
  {
   
     
      for(i=0;i<50;i++)
      {                
          delay();                           
          printf("%d\t", ADCData[i]);       
          
      }
      
      
      
     
    }
                        
}
    int fputc(int ch,FILE *f)
   {
   //ch送给USART1
    USART_SendData(USART1, ch);
    //等待发送完毕
    while(USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET) { }
    //返回ch
    return(ch);
    }
  
    void RCC_Configuration()
    {
        SystemInit();
        RCC_APB2PeriphClockCmd( RCC_APB2Periph_AFIO,ENABLE);//外部复用功能时钟
        RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOA,ENABLE);/*使能a口gpio的rcc时钟*/
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);
        RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
        RCC_ADCCLKConfig(RCC_PCLK2_Div6);//12M
    }
    void USART_gpio_init()
{      
       
       GPIO_InitTypeDef GPIO_InitStructure;//定义结构体
       //pa9为ua1的tx端  
       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;//定义引脚速度
       GPIO_InitStructure.GPIO_Pin=GPIO_Pin_9;//定义引脚
       GPIO_InitStructure.GPIO_Mode=GPIO_Mode_AF_PP;//定义输出模式
       GPIO_Init(GPIOA,&GPIO_InitStructure);//初始化
       //pa10为ua1的rx端
       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;//定义引脚速度
       GPIO_InitStructure.GPIO_Pin=GPIO_Pin_10;//定义引脚
       GPIO_InitStructure.GPIO_Mode=GPIO_Mode_IN_FLOATING;//定义输出模式
       GPIO_Init(GPIOA,&GPIO_InitStructure);//初始化
       //ad口
       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;//定义引脚速度
       GPIO_InitStructure.GPIO_Pin=GPIO_Pin_1;//定义引脚
       GPIO_InitStructure.GPIO_Mode=GPIO_Mode_AIN;//定义输出模式-模拟输入
       GPIO_Init(GPIOA,&GPIO_InitStructure);//初始化
            
}
   
   void USART_Configuration()
   {
   
    USART_InitTypeDef USART_InitStructure;
    USART_InitStructure.USART_BaudRate = 9600;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Tx;
    USART_Init(USART1,&USART_InitStructure);  
    USART_Cmd(USART1,ENABLE);//使能外设  
    USART_ClearFlag(USART1,USART_FLAG_TC);//清除待处理标志位USART_Cmd(USART1,ENABLE);//使能外设
    
   }

    void ADC_Configuration()
    {
    ADC_InitTypeDef ADC_InitStructure;//模式配置
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;//独立模式
    ADC_InitStructure.ADC_ScanConvMode = DISABLE;//单通道的单次模式
    ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;//循环模式
    ADC_InitStructure.ADC_ExternalTrigConv =ADC_ExternalTrigConv_None;//软件触发
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;//右对齐
    ADC_InitStructure.ADC_NbrOfChannel = 1;//规定了顺序进行规则转换的 ADC 通道的数目。这个数目的取值范围是 1 到 16。
    ADC_Init(ADC1, &ADC_InitStructure);//
    
    ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1,ADC_SampleTime_28Cycles5);//设置指定 ADC 的规则组通道，设置它们的转化顺序和采样时间
   
    ADC_Cmd(ADC1, ENABLE);//
     ADC_DMACmd(ADC1, ENABLE);//重点使能或者失能指定的 ADC 的 DMA 请求
    ADC_ResetCalibration(ADC1);//重置指定的 ADC 的校准寄存器
    while(ADC_GetResetCalibrationStatus(ADC1));//直到重置成功
    
    ADC_StartCalibration(ADC1);//开始指定 ADC 的校准状态
    while(ADC_GetCalibrationStatus(ADC1));//获取指定 ADC 的校准程序
    
    ADC_SoftwareStartConvCmd(ADC1, ENABLE);//使能或者失能指定的 ADC 的软件转换启动功能 
   
    }
    void DMA_Configuration()
    {
        DMA_DeInit(DMA1_Channel1);//DMA1正好连接adc1
        DMA_InitTypeDef DMA_InitStructure;
        DMA_InitStructure.DMA_PeripheralBaseAddr=(u32)&ADC1->DR;//相当于51的buffer（缓存器）,将地址赋给前方结构体，定义外设基地址
        DMA_InitStructure.DMA_MemoryBaseAddr =(u32)&ADCData;//定义内存基地址，即数组的首地址
        DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;//外设数据来源
        DMA_InitStructure.DMA_BufferSize = 50;//应与数组大小相同
        DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;//外设地址不变
        DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;//内存地址递增
        DMA_InitStructure.DMA_PeripheralDataSize =DMA_PeripheralDataSize_HalfWord;//定义数据位数，因为数组的位数为16位
        DMA_InitStructure.DMA_MemoryDataSize =DMA_MemoryDataSize_HalfWord;//定义内存位数
        DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;//循环缓存模式
        DMA_InitStructure.DMA_Priority = DMA_Priority_High;//优先级为中
        DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;//外设到内存
        DMA_Init(DMA1_Channel1, &DMA_InitStructure);//初始化
        DMA_Cmd(DMA1_Channel1, ENABLE);//使能外设
      
    }
     void delay()
     {
         int i=0;
         for(i=0;i<=12000000;i++);
     }