  #include"stm32f10x.h"
  void led_gpio_init();//led灯的gpio函数的声明
  void NVIC_Configration();//
  void TIM3_Configration();
  void main()
  {  
  SystemInit(); //设置时钟频率
  RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOA,ENABLE);/*使能a口gpio的rcc时钟*/
  RCC_APB1PeriphClockCmd( RCC_APB1Periph_TIM3,ENABLE);//外部复用功能时钟
  led_gpio_init();
  NVIC_Configration();//中断控制函数初始化
  TIM3_Configration();//调用时间配置函数
  while(1);//等待
  
   }
   void led_gpio_init()
   {
     //led
       GPIO_InitTypeDef GPIO_InitStructure;//定义结构体
       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;//定义引脚速度
       GPIO_InitStructure.GPIO_Pin=GPIO_Pin_7;//定义引脚
       GPIO_InitStructure.GPIO_Mode=GPIO_Mode_Out_PP;//定义输出模式
       GPIO_Init(GPIOA,&GPIO_InitStructure);//初始化
   }
 
   void NVIC_Configration()//嵌套向量中断控制器
   {
   NVIC_InitTypeDef NVIC_InitStructure;//定义结构体
   NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);//选择优先级组
   NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;//////////////定义属于第7组的中断频道
   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;//抢占式优先级位
   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;//从优先级位
   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;//使能
   NVIC_Init(&NVIC_InitStructure);////////初始化
   }
   void TIM3_Configration()//配置定时器3
   {
       TIM_DeInit(TIM3);
       TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
       TIM_ClearFlag(TIM3,TIM_FLAG_Update);  //清除中断标志位
       TIM_TimeBaseStructure.TIM_Period = 2000-1;//进行2000次就为一个周期，初值
       TIM_TimeBaseStructure.TIM_Prescaler = 35999;//36000分频，自动加1防止除数为0，然后使时钟2000次为1秒
       TIM_TimeBaseStructure.TIM_ClockDivision = 0;//平时不用时钟分割
       TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
       TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
       TIM_ITConfig(TIM3,TIM_IT_Update, ENABLE );//使能ＴＩＭ中断
       TIM_Cmd(TIM3,ENABLE);//使能外设时钟Tim3
   }
   void TIM3_IRQHandler(void)//中断函数行使函数
    {
      if(TIM_GetITStatus(TIM3, TIM_IT_Update) == SET)//判断中断是否触发
      {
         TIM_ClearFlag(TIM3,TIM_FLAG_Update);  //清除中断标志位
      
       {
         if(GPIO_ReadOutputDataBit(GPIOA, GPIO_Pin_7)==1)//引脚高低电平读取函数
          {
              GPIO_ResetBits(GPIOA,GPIO_Pin_7);
            
            //a7口为低电平
          }
          else
          { 
           GPIO_SetBits(GPIOA,GPIO_Pin_7);  //a7口为高电平
          
          }
       }
      }
     
  
    }